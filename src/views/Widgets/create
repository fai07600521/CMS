/* eslint-disable react/no-unescaped-entities */
/* eslint-disable no-dupe-class-members */
/* eslint-disable no-unreachable */
/* eslint-disable no-console */
/* eslint-disable react/jsx-no-duplicate-props */
/* eslint-disable prettier/prettier */
/* eslint-disable react/prop-types */
/* eslint-disable no-unused-vars */
/* eslint-disable no-undef */
import qs from "query-string";
import Add from "@material-ui/icons/Add";
import Container from '@material-ui/core/Container';
import React from "react";
import ReactDOM from "react-dom";
import PropTypes from "prop-types"; // @material-ui/core components
import ReactQuill from "react-quill"; // ES6
import withStyles from "@material-ui/core/styles/withStyles";
import TextField from "@material-ui/core/TextField";
import FormLabel from "@material-ui/core/FormLabel";
import FormControlLabel from "@material-ui/core/FormControlLabel";
import InputAdornment from "@material-ui/core/InputAdornment";
import Radio from "@material-ui/core/Radio";
import Checkbox from "@material-ui/core/Checkbox";
import { Editor } from "react-draft-wysiwyg";
import "react-draft-wysiwyg/dist/react-draft-wysiwyg.css";
// @material-ui/icons
import MailOutline from "@material-ui/icons/MailOutline";
import Check from "@material-ui/icons/Check";
import Clear from "@material-ui/icons/Clear";
import Contacts from "@material-ui/icons/Contacts";
import FiberManualRecord from "@material-ui/icons/FiberManualRecord";
import { observer, inject } from "mobx-react";
// require('react-quill/dist/quill.snow.css'); // CommonJS
// import 'react-quill/dist/quill.snow.css';
import { Component } from "react";
// core components
import GridContainer from "components/Grid/GridContainer.jsx";
import GridItem from "components/Grid/GridItem.jsx";
import CustomInput from "components/CustomInput/CustomInput.jsx";
import Button from "components/CustomButtons/Button.jsx";
import Card from "components/Card/Card.jsx";
import CardHeader from "components/Card/CardHeader.jsx";
import CardText from "components/Card/CardText.jsx";
import CardIcon from "components/Card/CardIcon.jsx";
import CardBody from "components/Card/CardBody.jsx";
import { api } from "../../config/config";
import axios from "axios";
import "react-quill/dist/quill.snow.css";
import regularFormsStyle from "assets/jss/material-dashboard-pro-react/views/regularFormsStyle";

class RegularForms extends React.Component {
  //const data = this.props.courseEditStore.toJS();
  constructor(props) {
    super(props);
    this.state = {
      checked: [24, 22],
      selectedValue: null,
      selectedEnabled: "b",
      editorHtml: "",
      editorHtml2: "",
      editorHtml3: "",
      editorHtml4: "",
      editorHtml5: "",
      editorHtml6: "",
      editorHtml7: "",
      editorHtml8: "",
      editorHtml9: ""
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleChangeEnabled = this.handleChangeEnabled.bind(this);
  }
  // eslint-disable-next-line react/no-deprecated
  async componentDidMount() {
    // eslint-disable-next-line react/prop-typespush("/error")
    const query = qs.parse(this.props.location.search);
    await this.props.courseEditStore.initData(query.id);
    const data = this.props.courseEditStore.toJS();
    console.log('after init', data.dateStart)
    // console.log(this.state.course[0].price);
  }
  handleClick(){
    try {
     this.props.courseEditStore.rdyToPut(api.url);
    } catch (err) {
      console.log(err.message)
    }
  }
  async handleClick2(){
    const data = this.props.courseEditStore.toJS();
    try {
      const response = await axios.put(`${api.url}/edit`,data);
      if (response.status === 200) {
        return response.status
      }
    } catch (err) {
      console.log(err.message);
    }
  }
  async handleClick3(){
    this.props.history.push(`admin/addcourse`);
  }

  handleChange(html, key) {
    console.log(html)
    this.props.courseEditStore.handleChange(html, key);
  }

  handleScan = data => {
    if (data) {
      this.setState({
        result: data
      });
    }
  };
  handleError = err => {
    // eslint-disable-next-line no-console
    console.error(err);
  };

  onEditorStateChange(editorState) {
    this.setState({
      editorState
    });
    console.log("this.state", this.state);
  }
  handleChangeEnabled(event) {
    this.setState({ selectedEnabled: event.target.value });
  }
  handleToggle(value) {
    const { checked } = this.state;
    const currentIndex = checked.indexOf(value);
    const newChecked = [...checked];

    if (currentIndex === -1) {
      newChecked.push(value);
    } else {
      newChecked.splice(currentIndex, 1);
    }

    this.setState({
      checked: newChecked
    });
  }

  render() {
    const { data } = this.props.courseEditStore.toJS();
    const { classes } = this.props;
    return (
      <GridContainer >
        <GridItem xs={12} sm={12} md={12}>
          <Card>
            <CardHeader color="rose" text>
              <CardText color="rose">
                <h4 className={classes.cardTitle}>Form Elements</h4>
              </CardText>
            </CardHeader>
            <Container maxWidth="lg">
            <CardBody >
              <form>
                <GridContainer>
                  <GridItem xs={12} sm={2}>
                    <FormLabel className={classes.labelHorizontal}>
                      Course Title
                    </FormLabel>
                  </GridItem>
                  <GridItem xs={12} sm={10}>
                    <CustomInput
                      id="pass"
                      formControlProps={{
                        fullWidth: true
                      }}
                      inputProps={{
                        type: "password",
                        autoComplete: "off"
                      }}
                      inputProps={{
                        value: data.courseTitle,
                        onChange: e =>
                          this.handleChange(e.target, "courseTitle")
                      }}
                    />
                  </GridItem>
                </GridContainer>
                <GridContainer>
                  <GridItem xs={12} sm={2}>
                    <FormLabel className={classes.labelHorizontal}>
                      Description
                    </FormLabel>
                  </GridItem>
                  <GridItem xs={12} sm={10}>
                    <ReactQuill
                      onChange={html => this.handleChange(html, "description")}
                      value={data.description}
                      modules={Editor.modules}
                      bounds={".app"}
                      placeholder={this.props.placeholder}
                    />
                  </GridItem>
                </GridContainer>
                <GridContainer>
                  <GridItem xs={12} sm={2}>
                    <FormLabel className={classes.labelHorizontal}>
                      Course Objective
                    </FormLabel>
                  </GridItem>
                  <GridItem xs={12} sm={10}>
                    <ReactQuill
                      onChange={html => this.handleChange(html, "courseObjective")}
                      value={data.courseObjective}
                      modules={Editor.modules}
                      formats={Editor.formats}
                      bounds={".app"}
                      placeholder={this.props.placeholder}
                    />
                  </GridItem>
                </GridContainer>
                <GridContainer>
                  <GridItem xs={12} sm={2}>
                    <FormLabel className={classes.labelHorizontal}>
                      Course Outcome
                    </FormLabel>
                  </GridItem>
                  <GridItem xs={12} sm={10}>
                    <ReactQuill
                      onChange={html =>
                        this.handleChange(html, "courseOutcome")
                      }
                      value={data.courseOutcome}
                      modules={Editor.modules}
                      formats={Editor.formats}
                      bounds={".app"}
                      placeholder={this.props.placeholder}
                    />
                  </GridItem>
                </GridContainer>
                <GridContainer>
                  <GridItem xs={12} sm={2}>
                    <FormLabel className={classes.labelHorizontal}>
                      Course Outline
                    </FormLabel>
                  </GridItem>
                  <GridItem xs={12} sm={10}>
                    <ReactQuill
                      onChange={html =>
                        this.handleChange(html, "courseOutline")
                      }
                      value={data.courseOutline}
                      modules={Editor.modules}
                      formats={Editor.formats}
                      bounds={".app"}
                      placeholder={this.props.placeholder}
                    />
                  </GridItem>
                </GridContainer>
                <GridContainer>
                  <GridItem xs={12} sm={2}>
                    <FormLabel className={classes.labelHorizontal}>
                      Instructor
                    </FormLabel>
                  </GridItem>
                  <GridItem xs={12} sm={10}>
                    <ReactQuill
                      onChange={html =>
                        this.handleChange(html, "nameInstructor")
                      }
                      value={data.nameInstructor}
                      modules={Editor.modules}
                      formats={Editor.formats}
                      bounds={".app"}
                      placeholder={this.props.placeholder}
                    />
                  </GridItem>
                </GridContainer>
                <GridContainer>
                  <GridItem xs={12} sm={2}>
                    <FormLabel className={classes.labelHorizontal}>
                      AboutInstructor
                    </FormLabel>
                  </GridItem>
                  <GridItem xs={12} sm={10}>
                    <ReactQuill
                      onChange={html =>
                        this.handleChange(html, "aboutInstructor")
                      }
                      value={data.aboutInstructor}
                      modules={Editor.modules}
                      formats={Editor.formats}
                      bounds={".app"}
                      placeholder={this.props.placeholder}
                    />
                  </GridItem>
                </GridContainer>
                <GridContainer>
                  <GridItem xs={12} sm={2}>
                    <FormLabel className={classes.labelHorizontal}>
                      Price
                    </FormLabel>
                  </GridItem>
                  <GridItem xs={12} sm={10}>
                    <CustomInput
                      id="pass"
                      formControlProps={{
                        fullWidth: true
                      }}
                      inputProps={{
                        type: "password",
                        autoComplete: "off"
                      }}
                      inputProps={{
                        value: data.price
                      }}
                    />
                  </GridItem>
                </GridContainer>
                <GridContainer>
                  <GridItem xs={12} sm={2}>
                    <FormLabel className={classes.labelHorizontal}>
                      Date Start
                    </FormLabel>
                  </GridItem>
                  <GridItem xs={12} sm={10}>
                    <form className={classes.container} noValidate>
                      <TextField
                        id="date"
                        type="date"
                        onChange={html => this.handleChange(html, "dateStart")}
                        value={data.dateStart}
                        className={classes.textField}
                        InputLabelProps={{
                          shrink: true
                        }}
                      />
                    </form>
                  </GridItem>
                </GridContainer>
                <GridContainer>
                  <GridItem xs={12} sm={2}>
                    <FormLabel className={classes.labelHorizontal}>
                      Date Stop
                    </FormLabel>
                  </GridItem>
                  <GridItem xs={12} sm={10}>
                    <form className={classes.container} noValidate>
                      <TextField
                        id="date"
                        type="date"
                        onChange={html => this.handleChange(html, "dateEnd")}
                        value={data.dateEnd}
                        className={classes.textField}
                        InputLabelProps={{
                          shrink: true
                        }}
                      />
                    </form>
                  </GridItem>
                </GridContainer>
                <GridContainer>
                  <GridItem xs={12} sm={2}>
                    <FormLabel className={classes.labelHorizontal}>
                      Location
                    </FormLabel>
                  </GridItem>
                  <GridItem xs={12} sm={10}>
                    <ReactQuill
                      onChange={html => this.handleChange(html, "location")}
                      value={data.location}
                      modules={Editor.modules}
                      formats={Editor.formats}
                      bounds={".app"}
                      placeholder={this.props.placeholder}
                    />
                  </GridItem>
                </GridContainer>
                <GridContainer>
                  <GridItem xs={12} sm={2}>
                    <FormLabel className={classes.labelHorizontal}>
                      Time Start
                    </FormLabel>
                  </GridItem>
                  <GridItem xs={12} sm={10}>
                    <form className={classes.container} noValidate>
                    <CustomInput
                      id="pass"
                      formControlProps={{
                        fullWidth: true
                      }}
                      inputProps={{
                        type: "password",
                        autoComplete: "off"
                      }}
                      inputProps={{
                        value: data.timeStart,
                        onChange: e =>
                          this.handleChange(e.target, "timeStart")
                      }}
                    />
                    </form>
                  </GridItem>
                </GridContainer>
                <GridContainer>
                  <GridItem xs={12} sm={2}>
                    <FormLabel className={classes.labelHorizontal}>
                      Time Stop
                    </FormLabel>
                  </GridItem>
                  <GridItem xs={12} sm={10}>
                    <form className={classes.container} noValidate>
                    <CustomInput
                      id="pass"
                      formControlProps={{
                        fullWidth: true
                      }}
                      inputProps={{
                        type: "password",
                        autoComplete: "off"
                      }}
                      inputProps={{
                        value: data.timeStart,
                        onChange: e =>
                          this.handleChange(e.target, "timeStart")
                      }}
                    />
                    </form>
                  </GridItem>
                </GridContainer>
              </form>
              <br/>
              <Button color="default" className={classes.addButton} onClick={() => this.handleClick3()} style = {{float: "right" , minWidth: "110px"}}>
                  Cancel
                  </Button>
            </CardBody>
          </Container>
          </Card>
        </GridItem>
      </GridContainer>
    );
  }
}

Editor.modules = {
  toolbar: [
    [{ header: "1" }, { header: "2" }, { font: [] }],
    [{ size: [] }],
    ["bold", "italic", "underline", "strike", "blockquote"],
    [
      { list: "ordered" },
      { list: "bullet" },
      { indent: "-1" },
      { indent: "+1" }
    ],
    ["link", "image", "video"],
    ["clean"]
  ],
  clipboard: {
    // toggle to add extra line breaks when pasting HTML:
    matchVisual: false
  }
};
/*
 * Quill editor formats
 * See https://quilljs.com/docs/formats/
 */
Editor.formats = [
  "header",
  "font",
  "size",
  "bold",
  "italic",
  "underline",
  "strike",
  "blockquote",
  "list",
  "bullet",
  "indent",
  "link",
  "image",
  "video"
];

/*
 * PropType validation
 */
Editor.propTypes = {
  placeholder: PropTypes.string
};

/*
 * Render component on page
 */
// ReactDOM.render(
//   <Editor placeholder={'Write something...'}/>,
//   document.querySelector('.app')
// )
RegularForms.propTypes = {
  classes: PropTypes.object
};
export const page = inject("courseEditStore")(observer(RegularForms));
export default withStyles(regularFormsStyle)(page);

